# Find pcap
# Merder Kim <hoxnox@gmail.com>
# 
# input:
#  PCAP_ROOT
#  PCAP_USE_STATIC_LIBS
#
# output:
#  PCAP_FOUND
#  PCAP_INCLUDE_DIR
#  PCAP_LIBRARIES
#

if(PCAP_INCLUDE_DIR AND PCAP_LIBRARIES)
	set(PCAP_FIND_QUITELY TRUE) # cached
endif(PCAP_INCLUDE_DIR AND PCAP_LIBRARIES)

if(NOT DEFINED PCAP_ROOT)
	set(PCAP_ROOT /usr /usr/local $ENV{PCAP_ROOT})
endif(NOT DEFINED PCAP_ROOT)

find_path(PCAP_INCLUDE_DIR pcap.h
	PATHS ${PCAP_ROOT}
	PATH_SUFFIXES pcap pcap/include include
)

if( PCAP_USE_STATIC_LIBS )
	set( _pcap_ORIG_CMAKE_FIND_LIBRARY_SUFFIXES ${CMAKE_FIND_LIBRARY_SUFFIXES})
	if(WIN32)
		set(CMAKE_FIND_LIBRARY_SUFFIXES .lib .a ${CMAKE_FIND_LIBRARY_SUFFIXES})
	else()
		set(CMAKE_FIND_LIBRARY_SUFFIXES .a )
	endif()
endif()

find_library(PCAP_LIBRARIES
	NAMES pcap
	PATHS ${PCAP_ROOT}
	PATH_SUFFIXES lib
)
mark_as_advanced(PCAP_INCLUDE_DIR PCAP_LIBRARIES)

# Restore the original find library ordering
if( PCAP_USE_STATIC_LIBS )
	set(CMAKE_FIND_LIBRARY_SUFFIXES ${_pcap_ORIG_CMAKE_FIND_LIBRARY_SUFFIXES})
endif()

include("${CMAKE_ROOT}/Modules/FindPackageHandleStandardArgs.cmake")
FIND_PACKAGE_HANDLE_STANDARD_ARGS(Pcap DEFAULT_MSG PCAP_INCLUDE_DIR PCAP_LIBRARIES)


